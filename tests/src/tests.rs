use super::*;
use ckb_testtool::context::Context;
use ckb_tool::ckb_types::{bytes::Bytes, core::TransactionBuilder, packed::*, prelude::*};
use das_bloom_filter::BloomFilter;
use rand::{thread_rng, Rng};
use rand::distributions::Alphanumeric;

// const MAX_CYCLES: u64 = 10_000_000_000;
const MAX_CYCLES: u64 = u64::MAX;

    fn optimal_bits_count(capacity: f64, err_rate: f64) -> f64 {
        let ln_2_2 = std::f64::consts::LN_2.powf(2f64);

        // m = -1 * (n * ln ε) / (ln 2)^2
        (-1f64 * capacity * err_rate.ln() / ln_2_2).ceil()
    }

    //#[cfg(feature = "std")]
    fn optimal_hashers_count(err_rate: f64) -> f64 {
        // k = -log_2 ε
        (-1f64 * err_rate.log2()).ceil()
    }

#[test]
fn test_success() {
    // deploy contract
    let mut context = Context::default();
    let contract_bin: Bytes = Loader::default().load_binary("perf-analysis");
    let out_point = context.deploy_cell(contract_bin);

    // prepare scripts
    let lock_script = context
        .build_script(&out_point, Bytes::from(vec![42]))
        .expect("script");
    let lock_script_dep = CellDep::new_builder().out_point(out_point).build();

    // prepare cells
    let input_out_point = context.create_cell(
        CellOutput::new_builder()
            .capacity(1000u64.pack())
            .lock(lock_script.clone())
            .build(),
        Bytes::new(),
    );
    let input = CellInput::new_builder()
        .previous_output(input_out_point)
        .build();
    let outputs = vec![
        CellOutput::new_builder()
            .capacity(500u64.pack())
            .lock(lock_script.clone())
            .build(),
        CellOutput::new_builder()
            .capacity(500u64.pack())
            .lock(lock_script)
            .build(),
    ];

    let outputs_data = vec![Bytes::new(); 2];

    // 上面都是无关紧要的构造交易的代码可以忽略

    let bits_count = optimal_bits_count(2_500f64, 0.0005);
    let hash_fn_count = optimal_hashers_count(0.0001);
    let mut all_items = Vec::new();
    let mut bf = BloomFilter::new(bits_count as u64, hash_fn_count as u64);
    //let mut bf = BloomFilter::new(1438, 10);

    // Insert 10000 random items.
    for _ in 1..1000 {
        let item: String = thread_rng()
            .sample_iter(&Alphanumeric)
            .map(char::from)
            .take(8)
            .collect();
        all_items.push(item.to_owned());
        bf.insert(item.as_bytes());
    }
    bf.insert(b"das");
    let b_u32 = bits_count as u32;
    let h_u32 = hash_fn_count as u32;
    let mut v_32 = b_u32.to_le_bytes().to_vec();
    let h_32 = h_u32.to_le_bytes().to_vec();
    v_32.extend(h_32);
    let filter = bf.export_bit_u8();
    v_32.extend(filter);
    let witnesses = vec![
        Bytes::from(v_32),
        // Bytes::from(hex::decode("64617300000000230000000c0000001f0000000f000000657874656e645f70726f706f73616c00000000").unwrap()),
        // Bytes::from(hex::decode("646173010000006d050000100000006d0500006d0500005d050000100000001400000018000000030000000100000041050000410500003c000000400000004100000042000000460000004a0000004e0000005200000056000000820100001104000015040000190400001d04000000000000040232000000320000003c00000080510100e80300002c01000024000000450000006600000087000000a8000000c9000000ea0000000b0100002100000010000000110000001900000001001bb70000000000804f1200000000002100000010000000110000001900000002c0d8a70000000000e0c81000000000002100000010000000110000001900000003809698000000000040420f000000000021000000100000001100000019000000044054890000000000a0bb0d0000000000210000001000000011000000190000000500127a000000000000350c00000000002100000010000000110000001900000006c0cf6a000000000060ae0a00000000002100000010000000110000001900000007808d5b0000000000c0270900000000002100000010000000110000001900000008404b4c000000000020a10700000000008f0200000c000000480000003c00000010000000140000001500000000000000012700000010000000180000002000000004000000f09f988204000000f09f918d03000000e29ca847020000100000001400000015000000010000000032020000fc00000001010000060100000b01000010010000150100001a0100001f01000024010000290100002e01000033010000380100003d01000042010000470100004c01000051010000560100005b01000060010000650100006a0100006f01000074010000790100007e01000083010000880100008d01000092010000970100009c010000a1010000a6010000ab010000b0010000b5010000ba010000bf010000c4010000c9010000ce010000d3010000d8010000dd010000e2010000e7010000ec010000f1010000f6010000fb01000000020000050200000a0200000f02000014020000190200001e02000023020000280200002d0200000100000030010000003101000000320100000033010000003401000000350100000036010000003701000000380100000039010000006101000000620100000063010000006401000000650100000066010000006701000000680100000069010000006a010000006b010000006c010000006d010000006e010000006f0100000070010000007101000000720100000073010000007401000000750100000076010000007701000000780100000079010000007a010000004101000000420100000043010000004401000000450100000046010000004701000000480100000049010000004a010000004b010000004c010000004d010000004e010000004f0100000050010000005101000000520100000053010000005401000000550100000056010000005701000000580100000059010000005a2c01000080510100805101002401000024000000440000006400000084000000a4000000c4000000e400000004010000cac501b0a5826bffa485ccac13c2195fcdf3aa86b113203f620ddd34d3decd70431a3af2d4bbcd69ab732d37be794ac0ab172c151545dfdbae1f578a7083bc84071ee1a005b5bc1a619aed290c39bbb613ac93991eabab8418d6b0a9bdd220eb15f69a14cfafac4e21516e7076e135492c4b20fe4fb5af9e1942577a46985a133d216e5bfb54b9e2ec0f0fbb1cdf23703f550a7ec7c35264742fce69308482e1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000").unwrap()),
        // Bytes::from(hex::decode("64617301000000b201000010000000b2010000b2010000a2010000100000001400000018000000040000000100000086010000860100000c000000410000003500000010000000300000003100000000000000000000000000000000000000000000000000000000000000000000000000000000450100000c000000c7000000bb0000001000000049000000820000003900000010000000240000002500000005d2771e6c0366846677ce2e97fe7a78a20ad1f800100871e1ff8a4cbde1d4673914707a32083e4ce039000000100000002400000025000000100871e1ff8a4cbde1d4673914707a32083e4ce0021710cbaf08cf1fa2dcad206a909c76705970a2ee390000001000000024000000250000001710cbaf08cf1fa2dcad206a909c76705970a2ee022ba50252fba902dc5287c8617a98d2b8e0c201d97e0000000c00000045000000390000001000000024000000250000005998f1666df91f989212994540a51561e1d3dc44005cbc30a5bfd00de7f7c512473f2ff097e7bba50b390000001000000024000000250000005cbc30a5bfd00de7f7c512473f2ff097e7bba50b0270aa5e4d41c3d557ca847bd10f1efe9b2ca07aca").unwrap()),
        // Bytes::from(hex::decode("64617302000000df01000010000000df010000df010000cf0100001000000014000000180000000400000001000000b3010000b301000024000000380000006d000000a20000009e0100009f010000a7010000af010000241251651ecaa91cb3755b27eefcf831ad8e68a935000000100000003000000031000000000000000000000000000000000000000000000000000000000000000000000000000000003500000010000000300000003100000000000000000000000000000000000000000000000000000000000000000000000000000000fc0000002c00000040000000550000006a0000007f00000094000000a9000000be000000d3000000e8000000140000000c000000100000000000000000000000150000000c00000010000000010000000100000064150000000c00000010000000010000000100000061150000000c00000010000000010000000100000073150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000031150000000c00000010000000010000000100000032140000000c00000010000000000000000000000000c0b3f95f00000000403818600000000004000000").unwrap()),
        // Bytes::from(hex::decode("64617306000000df01000010000000df010000df010000cf0100001000000014000000180000000500000001000000b3010000b30100001c000000180100004d01000082010000a3010000ab010000fc0000002c00000040000000550000006a0000007f00000094000000a9000000be000000d3000000e8000000140000000c000000100000000000000000000000150000000c00000010000000010000000100000064150000000c00000010000000010000000100000061150000000c00000010000000010000000100000073150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000035140000000c000000100000000000000000000000350000001000000030000000310000000000000000000000000000000000000000000000000000000000000000000000000000000035000000100000003000000031000000000000000000000000000000000000000000000000000000000000000000000000000000002100000010000000110000001900000008404b4c000000000020a1070000000000e80300000000000000f6086000000000").unwrap()),
        // Bytes::from(hex::decode("64617306000000df01000010000000df010000df010000cf0100001000000014000000180000000600000001000000b3010000b30100001c000000180100004d01000082010000a3010000ab010000fc0000002c00000040000000550000006a0000007f00000094000000a9000000be000000d3000000e8000000140000000c000000100000000000000000000000150000000c00000010000000010000000100000064150000000c00000010000000010000000100000061150000000c00000010000000010000000100000073150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000034140000000c000000100000000000000000000000350000001000000030000000310000000000000000000000000000000000000000000000000000000000000000000000000000000035000000100000003000000031000000000000000000000000000000000000000000000000000000000000000000000000000000002100000010000000110000001900000008404b4c000000000020a1070000000000e803000000000000c0b3f95f00000000").unwrap()),
        // Bytes::from(hex::decode("64617306000000df01000010000000df010000df010000cf0100001000000014000000180000000700000001000000b3010000b30100001c000000180100004d01000082010000a3010000ab010000fc0000002c00000040000000550000006a0000007f00000094000000a9000000be000000d3000000e8000000140000000c000000100000000000000000000000150000000c00000010000000010000000100000064150000000c00000010000000010000000100000061150000000c00000010000000010000000100000073150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000031150000000c00000010000000010000000100000038140000000c000000100000000000000000000000350000001000000030000000310000000000000000000000000000000000000000000000000000000000000000000000000000000035000000100000003000000031000000000000000000000000000000000000000000000000000000000000000000000000000000002100000010000000110000001900000008404b4c000000000020a1070000000000e80300000000000000f6086000000000").unwrap()),
        // Bytes::from(hex::decode("64617306000000df01000010000000df010000df010000cf0100001000000014000000180000000800000001000000b3010000b30100001c000000180100004d01000082010000a3010000ab010000fc0000002c00000040000000550000006a0000007f00000094000000a9000000be000000d3000000e8000000140000000c000000100000000000000000000000150000000c00000010000000010000000100000064150000000c00000010000000010000000100000061150000000c00000010000000010000000100000073150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000030150000000c00000010000000010000000100000038140000000c000000100000000000000000000000350000001000000030000000310000000000000000000000000000000000000000000000000000000000000000000000000000000035000000100000003000000031000000000000000000000000000000000000000000000000000000000000000000000000000000002100000010000000110000001900000008404b4c000000000020a1070000000000e80300000000000000f6086000000000").unwrap()),
    ].pack();

    // build transaction
    let tx = TransactionBuilder::default()
        .input(input)
        .outputs(outputs)
        .outputs_data(outputs_data.pack())
        .cell_dep(lock_script_dep)
        .witnesses(witnesses)
        .build();
    let tx = context.complete_tx(tx);

    // run
    let cycles = context
        .verify_tx(&tx, MAX_CYCLES)
        .expect("pass verification");
    println!("consume cycles: {}", cycles);
}
